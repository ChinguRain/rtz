<template>
  <v-text-field
    :label="item.display.label"
    :placeholder="item.display.placeholder"
    v-model="textInputData"
    :rules="rules"
    :id="item.display.label"
    :readonly="item.directives.readOnly"
    :type="item.directives.type"
    @keypress="checkIfKeyIsValid($event, item.directives.type, item.data.saveAs)"
    @change="emitValue"
    v-bind="item.directives"
  ></v-text-field>
</template>

<script>
export default {
  name: 'CommonTextInput',
  props: {
    item: {
      type: Object,
      required: true
    }
  },
  data() {
    return {
      textInputData: '',
      rules: [
        v => !!v || 'This field is required',
      ]
    }
  },
  methods: {
    checkIfKeyIsValid(event, type, saveAs) {
      const regxText = /^[a-zA-Z]+$/;
      const regexNum = /^[0-9]+$/;
      const regexDecimal = /^[0-9.]+$/;

      if (type === 'text' && event.key !== ' ' && !this.testInput(regxText, event.key)) {
        event.preventDefault();
      } else if (type === 'tel' && !this.testInput(regexNum, event.key)) {
        event.preventDefault();
      } else if (type === 'number' && saveAs === 'age' && !this.testInput(regexNum, event.key)) {
        event.preventDefault();
      } else if (type === 'number' && !this.testInput(regexDecimal, event.key)) {
        event.preventDefault();
      }
    },
    testInput(regex, input) {
      return regex.test(input);
    },
    emitValue() {
      this.$emit('addValue', {
        key: this.item.data.saveAs,
        value: this.textInputData.trim()
      });
    }
  }
}
</script>

<style scoped>
/* Add any specific styles if needed */
</style>
