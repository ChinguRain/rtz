<template>
  <v-text-field
    :label="label"
    :placeholder="placeholder"
    v-model="textInputData"
    :rules="rules"
    :id="label"
    :readonly="readOnly"
    :type="inputType"
    @change="emitValue"
    v-bind="item.directives"
  ></v-text-field>
</template>

<script>
  export default {
    name: 'CommonTextInput',
    props: {
      item: {
        type: Object,
        required: true,
      },
    },
    data() {
      return {
        textInputData: '',
        rules: [v => !!v || 'This field is required'],
      }
    },
    computed: {
      label() {
        return this.item.display.label
      },
      placeholder() {
        return this.item.display.placeholder
      },
      readOnly() {
        return this.item.directives.readOnly
      },
      inputType() {
        return this.item.directives.type
      },
    },
    methods: {
      emitValue() {
        this.$emit('addValue', {
          key: this.item.data.saveAs || '', // Handle case where saveAs might not be defined
          value: this.textInputData.trim(),
        })
      },
    },
  }
</script>

-------------------------------------------------------
// CommonTextInput.vue.test.js
import { shallowMount } from '@vue/test-utils';
import CommonTextInput from './CommonTextInput.vue'; // Adjust the path as necessary

describe('CommonTextInput.vue', () => {
  const itemMock = {
    display: {
      label: 'Test Label',
      placeholder: 'Test Placeholder',
    },
    directives: {
      readOnly: false,
      type: 'text',
    },
    data: {
      saveAs: 'testKey',
    },
  };

  it('should initialize with default data', () => {
    const wrapper = shallowMount(CommonTextInput, {
      props: { item: itemMock },
    });
    expect(wrapper.vm.textInputData).toBe('');
    expect(wrapper.vm.rules).toEqual([expect.any(Function)]);
  });

  it('should compute label correctly', () => {
    const wrapper = shallowMount(CommonTextInput, {
      props: { item: itemMock },
    });
    expect(wrapper.vm.label).toBe('Test Label');
  });

  it('should compute placeholder correctly', () => {
    const wrapper = shallowMount(CommonTextInput, {
      props: { item: itemMock },
    });
    expect(wrapper.vm.placeholder).toBe('Test Placeholder');
  });

  it('should compute readOnly correctly', () => {
    const wrapper = shallowMount(CommonTextInput, {
      props: { item: itemMock },
    });
    expect(wrapper.vm.readOnly).toBe(false);
  });

  it('should compute inputType correctly', () => {
    const wrapper = shallowMount(CommonTextInput, {
      props: { item: itemMock },
    });
    expect(wrapper.vm.inputType).toBe('text');
  });

  it('should emit value on change', async () => {
    const wrapper = shallowMount(CommonTextInput, {
      props: { item: itemMock },
    });

    // Set the text input data
    wrapper.vm.textInputData = 'Some input';
    
    // Trigger the emitValue method
    await wrapper.vm.emitValue();

    // Check that the correct event is emitted
    expect(wrapper.emitted('addValue')).toBeTruthy();
    expect(wrapper.emitted('addValue')[0]).toEqual([
      {
        key: 'testKey',
        value: 'Some input',
      },
    ]);
  });

  it('should validate input correctly', () => {
    const wrapper = shallowMount(CommonTextInput, {
      props: { item: itemMock },
    });

    // Test valid input
    wrapper.vm.textInputData = 'Valid input';
    expect(wrapper.vm.rules[0](wrapper.vm.textInputData)).toBe(true);

    // Test invalid input
    wrapper.vm.textInputData = '';
    expect(wrapper.vm.rules[0](wrapper.vm.textInputData)).toBe('This field is required');
  });
});
