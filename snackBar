<template>
  <v-container>
    <v-form ref="form" v-model="valid" lazy-validation>
      <div v-for="field in loginData" :key="field.data.saveAs">
        <common-text-input
          :item="field"
          @addValue="updateFieldValue(field.data.saveAs, $event)"
        ></common-text-input>
      </div>

      <v-btn :disabled="!valid" color="primary" @click="login">Login</v-btn>
    </v-form>

    <!-- Snackbar for Login Result -->
    <v-snackbar v-model="snackbar" :color="snackbarColor" timeout="3000">
      {{ snackbarMessage }}
      <template v-slot:action="{ attrs }">
        <v-btn text v-bind="attrs" @click="snackbar = false">Close</v-btn>
      </template>
    </v-snackbar>

    <!-- Display Entered Credentials -->
    <div v-if="loginSuccess" class="entered-credentials">
      <h3>Entered Credentials:</h3>
      <p><strong>Username:</strong> {{ username }}</p>
      <p><strong>Password:</strong> {{ password }}</p>
    </div>
  </v-container>
</template>

<script>
  import CommonTextInput from './CommonTextInput.vue' // Adjust the path as necessary
  import { LOGIN_DATA } from './loginFields.js' // Adjust the path as necessary

  export default {
    components: {
      CommonTextInput,
    },
    data() {
      return {
        valid: false,
        loginSuccess: false,
        loginFailed: false,
        snackbar: false,
        snackbarMessage: '',
        snackbarColor: '',
        credentials: {
          username: '',
          password: '',
        },
        loginData: LOGIN_DATA,
        mockCredentials: {
          username: 'testUser',
          password: 'testPassword',
        },
      }
    },
    computed: {
      username() {
        return this.credentials.username
      },
      password() {
        return this.credentials.password
      },
    },
    methods: {
      updateFieldValue(fieldName, data) {
        this.credentials[fieldName] = data.value // Update the credentials object
      },
      login() {
        if (this.$refs.form.validate()) {
          const isValidLogin =
            this.credentials.username === this.mockCredentials.username &&
            this.credentials.password === this.mockCredentials.password

          this.loginSuccess = isValidLogin // Show success alert
          this.loginFailed = !isValidLogin // Show failure alert

          if (isValidLogin) {
            this.snackbarMessage = `Login successful! Welcome, ${this.username}.`
            this.snackbarColor = 'success'
            console.log('Logging in with:', this.username, this.password)
          } else {
            this.snackbarMessage =
              'Invalid username or password. Please try again.'
            this.snackbarColor = 'error'
          }

          this.snackbar = true // Show snackbar
        }
      },
    },
  }
</script>

<style scoped>
  .entered-credentials {
    margin-top: 20px;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    background-color: #f9f9f9;
  }
</style>

------------------------------------------------------
// CommonTextInput.vue.test.js
import { shallowMount } from '@vue/test-utils';
import YourComponent from './YourComponent.vue'; // Adjust the path as necessary

describe('YourComponent.vue', () => {
  it('should initialize with default data', () => {
    const wrapper = shallowMount(YourComponent);
    expect(wrapper.vm.valid).toBe(false);
    expect(wrapper.vm.loginSuccess).toBe(false);
    expect(wrapper.vm.loginFailed).toBe(false);
    expect(wrapper.vm.snackbar).toBe(false);
    expect(wrapper.vm.snackbarMessage).toBe('');
    expect(wrapper.vm.snackbarColor).toBe('');
    expect(wrapper.vm.credentials).toEqual({
      username: '',
      password: '',
    });
  });

  it('should update field value correctly', () => {
    const wrapper = shallowMount(YourComponent);
    const fieldName = 'username';
    const data = { value: 'newUser ' };

    wrapper.vm.updateFieldValue(fieldName, data);
    expect(wrapper.vm.credentials.username).toBe('newUser ');
  });

  it('should login successfully with correct credentials', () => {
    const wrapper = shallowMount(YourComponent);
    wrapper.vm.credentials.username = 'testUser ';
    wrapper.vm.credentials.password = 'testPassword';
    
    // Mock the form validation
    wrapper.vm.$refs = {
      form: {
        validate: jest.fn().mockReturnValue(true),
      },
    };

    wrapper.vm.login();

    expect(wrapper.vm.loginSuccess).toBe(true);
    expect(wrapper.vm.loginFailed).toBe(false);
    expect(wrapper.vm.snackbarMessage).toBe('Login successful! Welcome, testUser .');
    expect(wrapper.vm.snackbarColor).toBe('success');
    expect(wrapper.vm.snackbar).toBe(true);
  });

  it('should fail login with incorrect credentials', () => {
    const wrapper = shallowMount(YourComponent);
    wrapper.vm.credentials.username = 'wrongUser ';
    wrapper.vm.credentials.password = 'wrongPassword';
    
    // Mock the form validation
    wrapper.vm.$refs = {
      form: {
        validate: jest.fn().mockReturnValue(true),
      },
    };

    wrapper.vm.login();

    expect(wrapper.vm.loginSuccess).toBe(false);
    expect(wrapper.vm.loginFailed).toBe(true);
    expect(wrapper.vm.snackbarMessage).toBe('Invalid username or password. Please try again.');
    expect(wrapper.vm.snackbarColor).toBe('error');
    expect(wrapper.vm.snackbar).toBe(true);
  });

  it('should not login if form validation fails', () => {
    const wrapper = shallowMount(YourComponent);
    
    // Mock the form validation to return false
    wrapper.vm.$refs = {
      form: {
        validate: jest.fn().mockReturnValue(false),
      },
    };

    wrapper.vm.login();

    expect(wrapper.vm.loginSuccess).toBe(false);
    expect(wrapper.vm.loginFailed).toBe(false);
    expect(wrapper.vm.snackbar).toBe(false);
  });
});
-----------------------------------------------------
// CommonTextInput.vue.test.js
import { shallowMount } from '@vue/test-utils';
import YourComponent from './YourComponent.vue'; // Adjust the path as necessary

describe('YourComponent.vue', () => {
  it('should initialize with default data', () => {
    const wrapper = shallowMount(YourComponent);
    expect(wrapper.vm.valid).toBe(false);
    expect(wrapper.vm.loginSuccess).toBe(false);
    expect(wrapper.vm.loginFailed).toBe(false);
    expect(wrapper.vm.snackbar).toBe(false);
    expect(wrapper.vm.snackbarMessage).toBe('');
    expect(wrapper.vm.snackbarColor).toBe('');
    expect(wrapper.vm.credentials).toEqual({
      username: '',
      password: '',
    });
  });

  it('should update field value correctly', () => {
    const wrapper = shallowMount(YourComponent);
    const fieldName = 'username';
    const data = { value: 'newUser ' };

    wrapper.vm.updateFieldValue(fieldName, data);
    expect(wrapper.vm.credentials.username).toBe('newUser ');
  });

  it('should compute username correctly', () => {
    const wrapper = shallowMount(YourComponent);
    wrapper.vm.credentials.username = 'testUser ';
    expect(wrapper.vm.username).toBe('testUser ');
  });

  it('should compute password correctly', () => {
    const wrapper = shallowMount(YourComponent);
    wrapper.vm.credentials.password = 'testPassword';
    expect(wrapper.vm.password).toBe('testPassword');
  });

  it('should login successfully with correct credentials', () => {
    const wrapper = shallowMount(YourComponent);
    wrapper.vm.credentials.username = 'testUser ';
    wrapper.vm.credentials.password = 'testPassword';
    
    // Mock the form validation
    wrapper.vm.$refs = {
      form: {
        validate: jest.fn().mockReturnValue(true),
      },
    };

    wrapper.vm.login();

    expect(wrapper.vm.loginSuccess).toBe(true);
    expect(wrapper.vm.loginFailed).toBe(false);
    expect(wrapper.vm.snackbarMessage).toBe('Login successful! Welcome, testUser .');
    expect(wrapper.vm.snackbarColor).toBe('success');
    expect(wrapper.vm.snackbar).toBe(true);
  });

  it('should fail login with incorrect credentials', () => {
    const wrapper = shallowMount(YourComponent);
    wrapper.vm.credentials.username = 'wrongUser ';
    wrapper.vm.credentials.password = 'wrongPassword';
    
    // Mock the form validation
    wrapper.vm.$refs = {
      form: {
        validate: jest.fn().mockReturnValue(true),
      },
    };

    wrapper.vm.login();

    expect(wrapper.vm.loginSuccess).toBe(false);
    expect(wrapper.vm.loginFailed).toBe(true);
    expect(wrapper.vm.snackbarMessage).toBe('Invalid username or password. Please try again.');
    expect(wrapper.vm.snackbarColor).toBe('error');
    expect(wrapper.vm.snackbar).toBe(true);
  });

  it('should not login if form validation fails', () => {
    const wrapper = shallowMount(YourComponent);
    
    // Mock the form validation to return false
    wrapper.vm.$refs = {
      form: {
        validate: jest.fn().mockReturnValue(false),
      },
    };

    wrapper.vm.login();

    expect(wrapper.vm.loginSuccess).toBe(false);
    expect(wrapper.vm.loginFailed).toBe(false);
    expect(wrapper.vm.snackbar).toBe(false);
  });
});
---------------------------------------------
computed: {
  credentialsData() {
    return {
      username: this.credentials.username,
      password: this.credentials.password,
    };
  },
}

 if (this.$refs.form.validate()) {
      const { username, password } = this.credentialsData; // Destructuring for easier access

      const isValidLogin =
        username === this.mockCredentials.username &&
        password === this.mockCredentials.password;
